{"version":3,"sources":["App.tsx","hooks.ts","sqlite/Table.tsx","sqlite/Database.tsx","reportWebVitals.ts","index.tsx"],"names":["DropZone","onDrop","status","style","useDropzone","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","dropStyle","useMemo","borderColor","className","fontSize","onClick","e","stopPropagation","href","App","useState","dbs","setDbs","addDb","useCallback","db","msg","progress","setProgress","reset","acceptedFiles","length","reader","FileReader","acceptedFile","onload","a","resultBuffer","Buffer","from","target","result","name","source","readAsArrayBuffer","dropHeight","fluid","marginTop","textAlign","height","map","index","useSelect","query","setResult","useEffect","res","exec","console","error","Table","columns","rows","striped","bordered","hover","size","col","values","rowIndex","colIndex","maxWidth","overflow","PaginationTable","limit","table","replace","columnsResult","totalResult","paginatedQuery","setPaginatedQuery","rowsResult","offset","setOffset","pagination","total","usePagination","ButtonGroup","Button","Math","max","disabled","Query","setQuery","results","Form","Control","value","onChange","as","placeholder","Database","setDb","initDb","Promise","initSQL","locateFile","file","all","SQL","buf","loadDb","Uint8Array","log","close","useSqlite","tables","flatMap","row","val","toString","getTables","Tabs","defaultActiveKey","Tab","eventKey","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1fd7ca9f.chunk.js","sourcesContent":["import { useCallback, useState, useMemo } from \"react\";\nimport { Alert, Container } from \"react-bootstrap\";\n\nimport { useDropzone } from \"react-dropzone\";\n\nimport { Database } from \"./sqlite/Database\";\n\nexport const DropZone = ({\n  onDrop,\n  status,\n  style,\n}: {\n  onDrop: any;\n  status?: string;\n  style?: Record<string | number, string & {}>;\n}) => {\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject,\n  } = useDropzone({\n    onDrop,\n    //accept: \"text/sqlite\",\n  });\n\n  const dropStyle = useMemo(\n    () => ({\n      ...(isDragActive\n        ? {\n            borderColor: \"#00e676\",\n          }\n        : {}),\n      ...(isDragAccept\n        ? {\n            borderColor: \"#00e676\",\n          }\n        : {}),\n      ...(isDragReject\n        ? {\n            borderColor: \"#ff1744\",\n          }\n        : {}),\n      ...style,\n    }),\n    [isDragActive, isDragReject, isDragAccept, style]\n  );\n\n  return (\n    <div {...getRootProps({ style: dropStyle })} className={\"dropZone\"}>\n      <input {...getInputProps()} />\n      {(status && <div>{status}</div>) || (\n        <div>\n          Glissez un fichier sqlite ici\n          <br />\n          <div style={{ fontSize: \"0.5em\" }}>\n            (Exemple :\n            <a\n              onClick={(e) => {\n                // prevent file input trigger\n                e.stopPropagation();\n              }}\n              href=\"https://github.com/lerocha/chinook-database/raw/master/ChinookDatabase/DataSources/Chinook_Sqlite.sqlite\"\n            >\n              Chinook_Sqlite.sqlite\n            </a>\n            )\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\ninterface Db {\n  name: string;\n  source: any;\n}\n\nfunction App() {\n  const [dbs, setDbs] = useState<Db[]>([]);\n  const addDb = useCallback(\n    (db: Db) => {\n      setDbs([...dbs, db]);\n    },\n    [dbs]\n  );\n\n  const [progress, setProgress] = useState({ status: \"\", msg: \"\" });\n  const reset = () => {\n    setProgress({ status: \"\", msg: \"\" });\n  };\n  const onDrop = useCallback(\n    (acceptedFiles) => {\n      reset();\n      if (acceptedFiles.length) {\n        setProgress({\n          status: \"running\",\n          msg: \"Chargement...\",\n        });\n        const reader = new FileReader();\n        const acceptedFile = acceptedFiles[0];\n        reader.onload = async (e) => {\n          setProgress({\n            status: \"\",\n            msg: \"\",\n          });\n          //@ts-expect-error\n          const resultBuffer = Buffer.from(e.target.result);\n          addDb({\n            name: acceptedFile.name,\n            source: resultBuffer,\n          });\n        };\n\n        reader.readAsArrayBuffer(acceptedFile);\n      } else {\n        setProgress({\n          status: \"error\",\n          msg: `Aucun fichier détecté`,\n        });\n        reset();\n      }\n    },\n    [addDb]\n  );\n\n  const dropHeight = dbs.length ? \"auto\" : \"40vh\";\n\n  return (\n    <Container fluid>\n      <Alert style={{ marginTop: 20, textAlign: \"center\" }}>\n        <h1>sqlite-browser</h1>\n        <p>Explorez vos données SQLite</p>\n      </Alert>\n      <DropZone\n        onDrop={onDrop}\n        status={progress.msg}\n        style={{ height: dropHeight }}\n      />\n      {dbs.map((db, index) => (\n        <div key={db.name}>\n          <h3>{db.name}</h3>\n          <Database source={db.source} />\n          <hr />\n        </div>\n      ))}\n    </Container>\n  );\n}\n\nexport default App;\n","import { useEffect, useState, useCallback } from \"react\";\n\nimport initSQL, {\n  Database,\n  QueryExecResult,\n  SqlValue,\n} from \"sql.js/dist/sql-asm-memory-growth\";\n\nexport interface PaginationResult {\n  columns: null | string[];\n  rows: SqlValue[][];\n  pagination: { total: number; offset: number; limit: number };\n  setOffset: Function;\n}\n\ninterface PaginationParams {\n  db: Database;\n  table?: string;\n  query: string;\n  limit?: number;\n}\n\nexport const usePagination = ({\n  db,\n  table,\n  query,\n  limit = 10,\n}: PaginationParams): PaginationResult => {\n  const [columnsResult] = useSelect(\n    db,\n    `${query.replace(/;\\s*$/, \"\")} LIMIT 1 OFFSET 0`\n  );\n  const [totalResult] = useSelect(\n    db,\n    table ? `select count(*) from ${table}` : \"select 0\"\n  );\n  const columns = (columnsResult && columnsResult.columns) || [];\n  const [paginatedQuery, setPaginatedQuery] = useState(null);\n  const [rowsResult] = useSelect(db, paginatedQuery);\n  const [offset, setOffset] = useState(0);\n\n  const total =\n    (totalResult && (totalResult.values[0][0] as number)) ||\n    rowsResult?.values?.length ||\n    0;\n  const pagination = { total, offset, limit };\n\n  useEffect(() => {\n    setPaginatedQuery(\n      `${query.replace(/;\\s*$/, \"\")} LIMIT ${limit} OFFSET ${offset}` as any\n    );\n  }, [query, offset, limit]);\n\n  return {\n    columns,\n    rows: rowsResult?.values || [],\n    pagination,\n    setOffset,\n  };\n};\n\nexport const useSqlite = (source: Promise<any>): [null | Database] => {\n  const [db, setDb] = useState(null);\n  const initDb = useCallback(async (source) => {\n    const [SQL, buf] = await Promise.all([\n      initSQL({\n        locateFile: (file) => `https://sql.js.org/dist/${file}`,\n      }),\n      await source,\n    ]);\n    const loadDb = new SQL.Database(new Uint8Array(buf));\n    //@ts-expect-error\n    setDb(loadDb);\n  }, []);\n  useEffect(() => {\n    if (db) {\n      return;\n    }\n    initDb(source);\n    return () => {\n      console.log(\"close db\");\n      //@ts-expect-error\n      db && db.close();\n    };\n  }, [initDb, source, db]);\n  return [db];\n};\n\nexport const useSelect = (\n  db: Database,\n  query: string | null\n): [null | QueryExecResult] => {\n  const [result, setResult] = useState(null);\n  useEffect(() => {\n    if (!query) {\n      setResult(null);\n      return;\n    }\n    try {\n      const res = db.exec(query) as any;\n      setResult(res[0]);\n    } catch (e) {\n      console.error(e);\n      setResult(null);\n    }\n  }, [query, db]);\n  return [result];\n};\n","import { Table as BsTable, ButtonGroup, Button } from \"react-bootstrap\";\n\nimport { Database } from \"sql.js/dist/sql-asm-memory-growth\";\n\nimport { usePagination } from \"../hooks\";\n\nexport const Table = ({\n  columns,\n  rows,\n}: {\n  columns: string[] | null;\n  rows: any;\n}) => {\n  return (\n    <BsTable striped bordered hover size=\"sm\">\n      <thead>\n        <tr>\n          {columns && columns.map((col: any) => <th key={col}>{col}</th>)}\n        </tr>\n      </thead>\n      <tbody>\n        {rows &&\n          rows.map((values: any, rowIndex: any) => (\n            <tr key={`row-${rowIndex}`}>\n              {columns &&\n                columns.map((col, colIndex) => {\n                  return (\n                    <td\n                      style={{ maxWidth: \"100%\", overflow: \"hidden\" }}\n                      key={rowIndex + \"-\" + colIndex}\n                    >\n                      {values[colIndex]}\n                    </td>\n                  );\n                })}\n            </tr>\n          ))}\n      </tbody>\n    </BsTable>\n  );\n};\n\nexport const PaginationTable = ({\n  db,\n  name,\n  limit = 10,\n}: {\n  db: Database;\n  name: string;\n  limit?: number;\n}) => {\n  const query = `SELECT * from ${name}`;\n  const { columns, rows, pagination, setOffset } = usePagination({\n    db,\n    table: name,\n    query,\n    limit,\n  });\n\n  const nextPage = () => {\n    setOffset(pagination.offset + rows.length);\n  };\n\n  const prevPage = () => {\n    setOffset(Math.max(0, pagination.offset - pagination.limit));\n  };\n\n  return (\n    columns && (\n      <div>\n        <Table columns={columns} rows={rows} />\n        {pagination && rows && (\n          <ButtonGroup size=\"sm\">\n            <Button onClick={prevPage} disabled={!pagination.offset}>\n              Prev\n            </Button>\n            <Button\n              onClick={nextPage}\n              disabled={pagination.offset + pagination.limit > pagination.total}\n            >\n              Next\n            </Button>\n          </ButtonGroup>\n        )}\n      </div>\n    )\n  );\n};\n","import { useState, useMemo } from \"react\";\nimport { useSqlite, useSelect } from \"../hooks\";\nimport { Form, Tabs, Tab } from \"react-bootstrap\";\nimport { PaginationTable, Table } from \"./Table\";\n\nimport { Database as SqliteDatabase } from \"sql.js/dist/sql-asm-memory-growth\";\n\nconst getTables = (db: SqliteDatabase | null) =>\n  (db &&\n    db\n      .exec(\n        \"SELECT name FROM sqlite_schema WHERE type ='table' AND name NOT LIKE 'sqlite_%';\"\n      )\n      .flatMap((row) => row.values.map((val) => val.toString()))) ||\n  [];\n\nconst Query = ({ db }: { db: SqliteDatabase }) => {\n  const [query, setQuery] = useState(\"\");\n  const [results] = useSelect(db, query);\n  return (\n    <div>\n      <Form.Control\n        value={query}\n        onChange={(e) => setQuery(e.target.value)}\n        as=\"textarea\"\n        rows={2}\n        placeholder=\"select * from album;\"\n      />\n      <br />\n      {results && (\n        <div>\n          {results.values.length} result(s)\n          <br />\n          <Table rows={results.values} columns={results.columns} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport const Database = ({ source }: { source: Promise<any> }) => {\n  const [db] = useSqlite(source);\n  const tables = useMemo(() => getTables(db), [db]);\n  return (\n    (db && tables && tables.length && (\n      <Tabs defaultActiveKey={tables[0]} className=\"mb-3\">\n        <Tab key=\"sql\" eventKey=\"sql\" title=\"SQL\">\n          <Query db={db} />\n        </Tab>\n        {tables.map((table) => (\n          <Tab key={table} eventKey={table} title={table}>\n            <PaginationTable key={table} db={db} name={table} />\n          </Tab>\n        ))}\n      </Tabs>\n    )) ||\n    null\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}